name: 백엔드 PROD CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "back-end/**"

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: application.yml 생성
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.PROD_PROPERTIES }}" > src/main/resources/application.yml

      - name: Gradle 을 통해 빌드
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: bootJar

      - name: Docker 빌드 도구 설정
        uses: docker/setup-buildx-action@v2.9.1

      - name: Docker Hub 로그인
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_HUB_REPOSITORY }}:${{ secrets.IMAGE_TAG }}

  docker-pull-and-run:
    runs-on: [self-hosted, Linux, X64]
    needs: [docker-build-and-push]
    if: ${{ needs.docker-build-and-push.result == 'success' }}

    steps:
      - name: 환경변수 파일 생성
        env:
          PROPERTIES_PROD: ${{ secrets.PROPERTIES_PROD }}
        run: |
          touch .env
          echo "${PROPERTIES_PROD}" > .env

      - name: Docker Hub 리포지토리에서 최신 이미지 가져오기
        run: |
          sudo docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          sudo docker pull ${{ secrets.DOCKER_HUB_REPOSITORY }}:${{ secrets.IMAGE_TAG }}

      - name: blue green 배포
        run: |
          sudo chmod +x deploy.sh
          sudo ./deploy.sh
